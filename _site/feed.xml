<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yuanmie</title>
    <description>疯狂的学习.</description>
    <link>http://192.168.11.32:4000/</link>
    <atom:link href="http://192.168.11.32:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 30 Jun 2020 00:09:15 +0800</pubDate>
    <lastBuildDate>Tue, 30 Jun 2020 00:09:15 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>zabbix监控TCP11种状态</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;zabbix—第4篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TCP有11种状态：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;客户端：SYN_SENT，FIN_WAIT1，FIN_WAIT2，CLOSING，TIME_WAIT 

服务端：LISTEN，SYN_RCVD，CLOSE_WAIT，LAST_ACK 

共有的：CLOSED，ESTABLISHED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以分为4步：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.查看TCP状态

2.配置监控项文件并测试

3.创建模板

4.设置触发器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;查看tcp状态&quot;&gt;查看TCP状态&lt;/h1&gt;
&lt;p&gt;在agent客户端端：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@zabbix-agent-35 zabbix_agentd.d]# netstat -ant|grep -c TIME_WAIT
46
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在zabbix服务端：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@zabbix-server cloudalert]# netstat -ant|grep -c LISTEN
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;配置监控项并测试&quot;&gt;配置监控项并测试&lt;/h1&gt;

&lt;p&gt;在agent客户端/etc/zabbix/zabbix_agentd.d目录下创建tcp.conf文件。&lt;/p&gt;

&lt;p&gt;在/etc/zabbix/scripts/创建tcp_status.sh，配置文件放在我github的&lt;a href=&quot;https://github.com/yuanmie-m/myblog.github.io/tree/master/shell&quot;&gt;shell文件夹中&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;重启agent：systemctl restart zabbix-agent&lt;/p&gt;

&lt;p&gt;在zabbix server端测试：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@zabbix-server cloudalert]# zabbix_get -s 192.168.11.35 -k tcp.status[timewait]
63

[root@zabbix-server cloudalert]# zabbix_get -s 192.168.11.35 -k tcp.status[listen]
8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;创建模板&quot;&gt;创建模板&lt;/h1&gt;
&lt;p&gt;创建模板：
&lt;img src=&quot;/img/zabbix-tcp创建模板.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置监控项信息：
&lt;img src=&quot;/img/zabbix-tcp监控项信息.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建图形：
&lt;img src=&quot;/img/zabbix-tcp图形.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在主机中添加tcp 11 status模板，等几分钟，数据就出来了。
&lt;img src=&quot;/img/zabbix-tcp监控成功.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;设置触发器&quot;&gt;设置触发器&lt;/h1&gt;

&lt;p&gt;创建触发器：
&lt;img src=&quot;/img/zabbix-tcp创建触发器.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置触发器参数信息：
&lt;img src=&quot;/img/zabbix-tcp创建触发器信息.png&quot; alt=&quot;&quot; /&gt;
添加好就可以在触发器内查看到了，当超过这个值时触发报警。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/29/zabbix%E7%9B%91%E6%8E%A7TCP11%E7%A7%8D%E7%8A%B6%E6%80%81/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/29/zabbix%E7%9B%91%E6%8E%A7TCP11%E7%A7%8D%E7%8A%B6%E6%80%81/</guid>
        
        <category>zabbix</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>zabbix监控系统</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;zabbix—第2篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;部署好zabbix之后开始添加主机。添加主机的方式：zabbix-agent，如果有大量的主机，建议使用ansible。&lt;/p&gt;

&lt;h1 id=&quot;安装agent&quot;&gt;安装agent&lt;/h1&gt;
&lt;p&gt;agent的安装方式有2种。&lt;/p&gt;

&lt;p&gt;1.使用tar.gz源码包安装&lt;a href=&quot;https://www.zabbix.com/cn/download_agents&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.使用yum安装&lt;a href=&quot;https://www.zabbix.com/cn/download&quot;&gt;yum安装&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我这里使用yum安装。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm

2.yum clean all

3.yum install zabbix-agent -y

4.启动：systemctl start zabbix-agent。设置开机启动：systemctl enable zabbix-agent

5.查看端口：ss -lunpt|grep zabbix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改agent的一些配置，yum安装的插件配置文件都在/etc目录下。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    vim /etc/zabbix/zabbix_agentd.conf

    修改：
    &lt;span class=&quot;nv&quot;&gt;LogFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/zabbix/zabbix_agentd.log
    &lt;span class=&quot;nv&quot;&gt;LogFileSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
    &lt;span class=&quot;nv&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.11.133
    &lt;span class=&quot;nv&quot;&gt;ServerActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.11.133
    &lt;span class=&quot;nv&quot;&gt;Hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zabbix-agent-35

    server和serveractive是你的zabbix服务端地址，hostname最好填容易区分的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;添加主机监控系统的cpu等&quot;&gt;添加主机，监控系统的cpu等&lt;/h1&gt;

&lt;p&gt;安装好agent之后，登录zabbix的web界面。&lt;/p&gt;

&lt;p&gt;添加主机：
&lt;img src=&quot;/img/zabbix-创建主机.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加主机信息：
&lt;img src=&quot;/img/zabbix-添加主机信息.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加模板：
&lt;img src=&quot;/img/zabbix-添加模板.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加成功：
&lt;img src=&quot;/img/zabbix-添加成功.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看主机信息：
&lt;img src=&quot;/img/zabbix-查看主机信息.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;设置监控项&quot;&gt;设置监控项&lt;/h1&gt;

&lt;p&gt;监控项，就是你要监控什么。&lt;/p&gt;

&lt;p&gt;触发器，就是设置一个值（监控项），超过这个值就触发，在报警通知相关人员。&lt;/p&gt;

&lt;p&gt;创建监控项
&lt;img src=&quot;/img/zabbix-创建监控项.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置监控项
&lt;img src=&quot;/img/zabbix-设置监控项.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看监控项：
&lt;img src=&quot;/img/zabbix-查看监控项.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;设置触发器&quot;&gt;设置触发器&lt;/h1&gt;
&lt;p&gt;创建触发器：
&lt;img src=&quot;/img/zabbix-创建触发器.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置触发器配置
&lt;img src=&quot;/img/zabbix-设置触发器配置.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看触发器
&lt;img src=&quot;/img/zabbix-查看触发器.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加图形
&lt;img src=&quot;/img/zabbix-触发器自定义图形.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;报警功能的实现&quot;&gt;报警功能的实现&lt;/h1&gt;
&lt;p&gt;报警的方式：企业微信，邮箱（163邮箱/QQ邮箱），电话（onealert）&lt;/p&gt;

&lt;p&gt;创建动作，触发器示警大于等于就触发：
&lt;img src=&quot;/img/zabbix报警-创建动作.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置163邮箱告警：
&lt;img src=&quot;/img/zabbix报警-创建动作配置.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/zabbix报警-创建操作.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/zabbix报警-创建恢复操作.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置报警媒介：
&lt;img src=&quot;/img/zabbix报警-配置报警媒介.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试，停止agent,我这里的QQ邮箱关掉了。
&lt;img src=&quot;/img/zabbix报警-发送成功.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;163邮箱查看：
&lt;img src=&quot;/img/zabbix报警-163邮箱收件.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;电话通知实现&quot;&gt;电话通知实现&lt;/h2&gt;
&lt;p&gt;我这里的实现是用onealert实现的，配置报警媒介与配置1163邮箱差不多，先去&lt;a href=&quot;http://www.onealert.com/&quot;&gt;睿象云&lt;/a&gt;注册一个账号。免费版有试用的天数，过了就无法电话通知，需要买了。&lt;/p&gt;

&lt;p&gt;注册好之后，需要在zabbix的服务端安装它们的插件。
&lt;img src=&quot;/img/zabbix-onealert的实现配置.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装过程也比较简单，上面点击zabbix之后，就进入安装教程，按照教程安装即可，注意：appkey的值，写入zabbix的动作时用到。&lt;/p&gt;

&lt;p&gt;安装完成之后，需先添加团队。
&lt;img src=&quot;/img/zabbix-onealert添加团队及成员.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加分派策略
&lt;img src=&quot;/img/zabbix-onealert添加分派策略.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通知策略：
&lt;img src=&quot;/img/zabbix-onealert通知策略.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/29/zabbix%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F+%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/29/zabbix%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F+%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5/</guid>
        
        <category>zabbix</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>zabbix监控nginx</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;zabbix—第3篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做nginx监控之前先搞明白nginx_status：
&lt;img src=&quot;/img/nginx_status.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Activeconnections:对后端发起的活动连接数；

server accepts 76：nginx 总共处理了76个连接；

handled：成功创建了76次握手；

requests：总共处理了107请求。

Reading：nginx读取客户端的header数；

Writing: nginx 返回给客户端的header数；

Waiting: nginx 请求处理完成，正在等待下一请求指令的连接。

在访问效率很高，请求很快被处理完毕的情况下，Waiting 数比较多是正常的。如果 reading + writing 数较多，则说明并发访问量很大，正在处理过程中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;zabbix监控nginx4步。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.修改nginx.conf配置文件

2.自定义监控项并测试

3.导入模板/自己写也可以

4.设置触发器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;修改nginxconf文件&quot;&gt;修改nginx.conf文件&lt;/h1&gt;
&lt;p&gt;在被监控的主机上，配置nginx.conf，添加如下内容：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        location /nginx_status &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          stub_status on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          access_log off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/nginx_config节点上.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;加载nginx：nginx -s reload&lt;/p&gt;

&lt;p&gt;浏览器访问：https://IP/nginx_status
&lt;img src=&quot;/img/nginx_status.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;自定义监控项并测试&quot;&gt;自定义监控项并测试&lt;/h1&gt;
&lt;p&gt;在zabbix的agent节点上：&lt;/p&gt;

&lt;p&gt;1.在/etc/zabbix/scripts目录下创建脚本：nginx_monitor.sh（脚本我放在我github的shell目录下）&lt;/p&gt;

&lt;p&gt;赋与执行权限：chmod +x nginx_monitor.sh&lt;/p&gt;

&lt;p&gt;2.在/etc/zabbix/zabbix_agentd.d/目录下创建配置文件：nginx_monitor.conf&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UserParameter=nginx_status[*],/etc/zabbix/scripts/nginx_monitor.sh $1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.重启agent：systemctl restart zabbix-agent&lt;/p&gt;

&lt;p&gt;在zabbix的服务端测试：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[active]
1

[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[reading]
0

[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[writing]
1

[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[waiting]
0

[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[accepts]
76


[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[handled]
76

[root@zabbix-server cloudalert]#  zabbix_get -s 192.168.11.35 -k nginx_status[requests]
107
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;导入模板自己写也可以&quot;&gt;导入模板/自己写也可以&lt;/h1&gt;
&lt;p&gt;创建nginx status模板：
&lt;img src=&quot;/img/nginx_config创建模板.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建nginx status监控项：
&lt;img src=&quot;/img/nginx_status创建监控项.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;监控项内容：
&lt;img src=&quot;/img/nginx_status监控项内容.png&quot; alt=&quot;&quot; /&gt;
根据nginx_monitor.sh脚本，里面有7项内容。依次完成如下配置：
&lt;img src=&quot;/img/nginx_status7项监控项.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置监控项图形：
&lt;img src=&quot;/img/nginx_status图形.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加完图形之后，在zabbix上选择主机将nginx status模板加入就算完成了，可以去查看数据，刚添加好，需要等几分钟。&lt;/p&gt;

&lt;p&gt;成功数据如下：
&lt;img src=&quot;/img/nginx_status成功.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;设置触发器&quot;&gt;设置触发器&lt;/h1&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/zabbix%E7%9B%91%E6%8E%A7nginx/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/zabbix%E7%9B%91%E6%8E%A7nginx/</guid>
        
        <category>zabbix</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>OSI网络参考模型</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;网络第1篇之OSI参考模型. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做的中间件运维，一定离不开nginx/tomcat，做nginx就一定会有反向代理和负载均衡。&lt;/p&gt;

&lt;h1 id=&quot;osi参考模型&quot;&gt;OSI参考模型&lt;/h1&gt;
&lt;p&gt;一个图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1593321941404&amp;amp;di=4693a4993fa7a33363718dbafa5c7be8&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D2396422661%2C2994864451%26fm%3D214%26gp%3D0.jpg&quot; alt=&quot;avatar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;搞懂每一层都干什么事，原理是什么，如何去实现。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;应用层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;各种应用程序协议，如：HTTP、FTP、SMTP、POP3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;表示层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;信息的语法语义以及它们的关联，如加密解密、转换翻译、压缩解压。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会话层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;不同机器上的用户之间建立及管理会话。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;传输层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;接受上一层的数据，在必要的时候把数据进行分割，并讲这些数据交给网络层，且保证这些数据段有效到达对端。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;网络层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;控制子网的运行，如逻辑编制、分组传输、路由选择
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据链路层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;物理选址，同时将原始比特流转变为逻辑传输路线。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;物理层&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;机械、电子、定时接口通信信道上的原始比特流传输。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;各层传输的基本单位&quot;&gt;各层传输的基本单位&lt;/h2&gt;

&lt;p&gt;应用层的PDU 称为数据&lt;/p&gt;

&lt;p&gt;传输层的PDU 称为数据段&lt;/p&gt;

&lt;p&gt;网络层的PDU 称为数据包&lt;/p&gt;

&lt;p&gt;数据链路层的PDU 称为帧&lt;/p&gt;

&lt;p&gt;物理层的PDU 称为比特（位）&lt;/p&gt;

&lt;h2 id=&quot;各层对应的设备&quot;&gt;各层对应的设备&lt;/h2&gt;

&lt;p&gt;应用层：应用程序&lt;/p&gt;

&lt;p&gt;表示层：编码、转化，界面与二进制互相转换的地方&lt;/p&gt;

&lt;p&gt;会话层：提供单工(Simplex)、半双工(Half duplex)、全双工(Full duplex)三种通信模式的服务。我们平时所知的NFS，RPC,X Windows等都工作在这一层。&lt;/p&gt;

&lt;p&gt;传输层：端到端的逻辑链接。三次握手，四次挥手。&lt;/p&gt;

&lt;p&gt;网络层：IP地址/路由器&lt;/p&gt;

&lt;p&gt;数据链路层：负责准备物理传输，CRC校验，错误通知，网络拓扑，流控等。我们所熟知的MAC地址和交换机都工作在这一层。&lt;/p&gt;

&lt;p&gt;传输层：O1O1O1比特流&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;p&gt;网线，集线器－－－－物理层&lt;/p&gt;

&lt;p&gt;网卡，网桥－－－－数据链路&lt;/p&gt;

&lt;p&gt;路由器－－－－－网络层&lt;/p&gt;

&lt;h1 id=&quot;l4层代理l7层代理&quot;&gt;L4层代理/L7层代理&lt;/h1&gt;

&lt;p&gt;L2层：根据数据链路层MAC地址完成数据交换&lt;/p&gt;

&lt;p&gt;L3层：根据网络层IP地址完成数据交换&lt;/p&gt;

&lt;p&gt;L4层，在传输层，使用IP+port转发&lt;/p&gt;

&lt;p&gt;L7层，在应用层，使用HTTP协议，也可以IP+port。&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/web%E7%BD%91%E7%BB%9COSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/web%E7%BD%91%E7%BB%9COSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</guid>
        
        <category>网络</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>高可用解决方案</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“高可用—第1篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;高可用&quot;&gt;高可用&lt;/h1&gt;

</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/%E9%AB%98%E5%8F%AF%E7%94%A8/</guid>
        
        <category>高可用</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>zabbix简介</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“zabbix—第1篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;zabbix，是什么？能帮我们做什么？&lt;/p&gt;

&lt;h1 id=&quot;zabbix&quot;&gt;zabbix&lt;/h1&gt;

&lt;p&gt;zabbix能监控什么？&lt;/p&gt;

&lt;p&gt;监控的指标是那些？&lt;/p&gt;

&lt;p&gt;如何定义超过什么范围就触发报警？&lt;/p&gt;

&lt;p&gt;如何报警让相关负责人知道？&lt;/p&gt;

&lt;h2 id=&quot;系统&quot;&gt;系统&lt;/h2&gt;

&lt;p&gt;CPU，内存(memory)，网络(network)，磁盘(io)，进程等&lt;/p&gt;

&lt;p&gt;CPU&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usr&amp;lt;=70%, sys&amp;lt;=35%, usr+sys&amp;lt;=70%（应用程序可用内存/系统物理内存 &amp;lt;= 70%）

linux上常用工具：top，vmstat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;内存&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;si == so == 0 可用空间&amp;gt;=30%

linux上常用工具：vmstat 1;free; /proc/meminfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;网络&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;udp：缓冲区不挤压, 无丢包 tcp：重传率

linux上常用工具：netstat -lunp; netstat -su; /proc/net/snmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;磁盘&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iowait% &amp;lt; 20%

linux上常用工具：iostat -x，sar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1004358&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;中间件及tcp&quot;&gt;中间件及TCP&lt;/h2&gt;

&lt;p&gt;nginx，mysql，java，tomcat，php，redis，TCP&lt;/p&gt;

&lt;p&gt;nginx&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;状态码，吞吐量，并发连接数，并发连接数详细统计(包括读取请求，处理请求和发送响应)等等
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mysql&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;流量统计，并发连接数（包括最大允许连接数，实际最大连接数，当前连接数，活跃连接数，缓存连接数等等）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tomcat&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jvm内存，tomcat请求数，网络流量统计，处理时间(最大处理时间，平均处理时间)等等
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;redis&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;链接客户数，链接从库数，阻塞数，使用内存，执行命令每分钟等等
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TCP&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;客户端：SYN_SENT，FIN_WAIT1，FIN_WAIT2，CLOSING，TIME_WAIT 

服务端：LISTEN，SYN_RCVD，CLOSE_WAIT，LAST_ACK 

共有的：CLOSED，ESTABLISHED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/trecn001/article/details/83786577&quot;&gt;参考1&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/smooth00/article/details/63689012&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;zabbix的安装&quot;&gt;zabbix的安装&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zabbix.com/documentation/4.0/zh/manual&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yaoyaojcy/p/9884130.html&quot;&gt;参考-zabbix4.0安装&lt;/a&gt;，非常的详细。&lt;/p&gt;

&lt;p&gt;默认登录账号密码：Admin/zabbix&lt;/p&gt;
&lt;h1 id=&quot;zabbix的监控模式&quot;&gt;zabbix的监控模式&lt;/h1&gt;
&lt;p&gt;zabbix收集数据分为主动和被动两种模式：&lt;/p&gt;

&lt;p&gt;主动模式被动模式：默认为zabbix-agent被动模式。&lt;/p&gt;

&lt;p&gt;主动模式与被动模式主要是站在zabbix-agent身份来说。&lt;/p&gt;

&lt;p&gt;1.被动模式（zabbix-server轮询检测zabbix-agent）&lt;/p&gt;

&lt;p&gt;2.主动模式（zabbix-agent主动上报给zabbix-server）优&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;主动：agent请求server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给server/proxy（agent主动获取监控项列表，并主动提交数据给server/proxy）

被动：server向agent请求获取监控项的数据，agent返回数据。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;zabbix主动模式与被动模式选择&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.当（Queue）队列中有大量的延迟监控项

2.当监控主机超过300+ ,建议使用主动模式
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;zabbix的上限：1000台&lt;/p&gt;

&lt;h1 id=&quot;zabbix报警通知&quot;&gt;zabbix报警通知&lt;/h1&gt;

&lt;p&gt;企业微信，邮箱（163邮箱，QQ邮箱），电话告警（onealert）&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/zabbix%E7%AE%80%E4%BB%8B/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/zabbix%E7%AE%80%E4%BB%8B/</guid>
        
        <category>zabbix</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>nginx</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;nginx—第1篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;nginx，搞懂反向代理和负载均衡！&lt;/p&gt;

&lt;h1 id=&quot;反向代理&quot;&gt;反向代理&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;反向代理怎么做？具体如何实现？&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;代理的分类&quot;&gt;代理的分类&lt;/h2&gt;

&lt;p&gt;有反向代理就有正向代理。&lt;/p&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;
&lt;p&gt;正向代理：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;正向代理，架设在客户机与目标主机之间，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;反向代理：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端（理解+背），此时代理服务器与目标主机一起对外表现为一个服务器。 ### 区别 反向代理和正向代理的区别就是：

正向代理代理客户端，反向代理代理服务器。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;作用&quot;&gt;作用&lt;/h3&gt;
&lt;p&gt;正向代理：类似一个跳板机，代理访问外部资源。（在客户机和目标主机之间）&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;（1）访问原来无法访问的资源，如google（做VPN）&lt;/p&gt;

&lt;p&gt;（2）可以做缓存，加速访问资源&lt;/p&gt;

&lt;p&gt;（3）对客户端访问授权，上网进行认证&lt;/p&gt;

&lt;p&gt;（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息&lt;/p&gt;

&lt;p&gt;反向代理：以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端。（架设在服务器端）&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网&lt;/p&gt;

&lt;p&gt;（2）负载均衡，通过反向代理服务器来优化网站的负载&lt;/p&gt;

&lt;p&gt;（3）通过缓存静态资源，加速Web请求。&lt;/p&gt;

&lt;h3 id=&quot;透明代理&quot;&gt;透明代理&lt;/h3&gt;

&lt;p&gt;面试被问到了。&lt;/p&gt;

&lt;p&gt;它主要指内网主机需要访问外网主机时，不需要做任何设置，完全意识不到防火墙的存在，而完成内外网的通信。但其基本原理是防火墙代替内部网络主机完成与外网主机通信，然后把结果传回给内网主机，在这个过程中，无论内网主机还是外网主机都意识不到它们其实是在和防火墙通信。而从外网只能看到防火墙，这就隐藏了内网网络，提高了安全性。&lt;/p&gt;

&lt;h2 id=&quot;nginx反向代理的例子&quot;&gt;nginx反向代理的例子&lt;/h2&gt;

&lt;h1 id=&quot;负载均衡&quot;&gt;负载均衡&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;负载均衡怎么做？具体怎么实现？&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一句话：nginx会给你分配服务器压力小的去访问。&lt;/p&gt;

&lt;p&gt;如何去实现负载均衡？&lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;官网&lt;/a&gt;给了几种方法。&lt;/p&gt;

&lt;h2 id=&quot;轮循默认&quot;&gt;轮循（默认）&lt;/h2&gt;

&lt;p&gt;Nginx根据请求次数，将每个请求均匀分配到每台服务器&lt;/p&gt;

&lt;h2 id=&quot;最少连接&quot;&gt;最少连接&lt;/h2&gt;

&lt;p&gt;将请求分配给连接数最少的服务器。Nginx会统计哪些服务器的连接数最少。&lt;/p&gt;

&lt;h2 id=&quot;ip-hash&quot;&gt;IP Hash&lt;/h2&gt;

&lt;p&gt;绑定处理请求的服务器。第一次请求时，根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上。后面该客户端的所有请求，都将通过HASH算法，找到之前处理这台客户端请求的服务器，然后将请求交给它来处理。（如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。）&lt;/p&gt;

&lt;h2 id=&quot;指定权重weight&quot;&gt;指定权重（weight）&lt;/h2&gt;

&lt;p&gt;指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/nginx/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/nginx/</guid>
        
        <category>nginx</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>mysql高可用</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;高可用之mysql—第2篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;mysql高可用是如何实现的？&lt;/p&gt;

&lt;p&gt;在mysql高可用内，你遇到什么问题？如何解决？&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/mysql%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/mysql%E9%AB%98%E5%8F%AF%E7%94%A8/</guid>
        
        <category>高可用</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>jenkins</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;jenkins—第1篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jenkins&lt;/p&gt;

&lt;h1 id=&quot;jenkins&quot;&gt;jenkins&lt;/h1&gt;

</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/jenkins/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/jenkins/</guid>
        
        <category>jenkins</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>docker入门</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“docker—第1篇. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;docker&quot;&gt;docker&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt;    List images                                   # 列出系统当前镜像&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt;        List containers                               # 列出容器列表&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info&lt;/code&gt;      Display system-wide information               # 显示系统相关信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect&lt;/code&gt;   Return low-level information on a container   # 查看容器详细信息&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill&lt;/code&gt;      Kill a running container                      # kill 指定 docker 容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt;      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save&lt;/code&gt;      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt;     Register or Login to the docker registry server &lt;br /&gt;
              # 注册或者登陆一个 docker 源服务器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt;       Tag an image into a repository                # 给源中镜像打标签&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull&lt;/code&gt;      Pull an image or a repository from the docker registry server
              # 从docker镜像源服务器拉取指定镜像或者库镜像&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;      Push an image or a repository to the docker registry server
              # 推送指定镜像或者库镜像至docker源服务器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;        Remove one or more containers                 # 移除一个或者多个容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rmi&lt;/code&gt;       Remove one or more images               &lt;br /&gt;
              # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt;       Fetch the logs of a container                 # 输出当前容器日志信息&lt;/p&gt;

&lt;p&gt;例如：查看指定时间后的日志，只显示最后100行：
docker logs -f -t –since=”2020-06-27” –tail=100 CONTAINER_ID&lt;/p&gt;

&lt;p&gt;查看最近30分钟的日志：docker logs –since 30m CONTAINER_ID&lt;/p&gt;

&lt;p&gt;查看某时间之后的日志：logs -t –since=”2020-06-27T13:23:37” CONTAINER_ID&lt;/p&gt;

&lt;p&gt;查看某时间段日志：docker logs -t –since=”2020-06-26T13:23:37” –until “2020-06-27T12:23:37” CONTAINER_ID&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://192.168.11.32:4000/linux/2020/06/27/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://192.168.11.32:4000/linux/2020/06/27/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
        
        <category>docker</category>
        
        
        <category>Linux</category>
        
      </item>
    
  </channel>
</rss>
